namespace java com.sosop.cache.redis.thrift
service Remote { 
    string sets(1:string cluster, 2: string key,3: string value);
    string setx(1:string cluster, 2: string key,3: string value, 4:string nxxx, 5:string expx, 6:i64 time);
    string get(1:string cluster, 2: string key);
    bool exists(1:string cluster, 2: string key);
    i64 persist(1:string cluster, 2: string key);
    string type(1:string cluster, 2: string key);
    i64 expire(1:string cluster, 2: string key, 3:i32 seconds);
    i64 expireAt(1:string cluster, 2: string key, 3:i64 unixTime);
    i64 ttl(1:string cluster, 2: string key);
    bool setbit(1:string cluster, 2: string key, 3:i64 offset, 4:bool value);
    bool setbit0(1:string cluster, 2: string key, 3:i64 offset, 4:string value);
    bool getbit(1:string cluster, 2: string key, 3:i64 offset);
    i64 setrange(1:string cluster, 2: string key, 3:i64 offset, 4:string value);
    string getrange(1:string cluster, 2: string key, 3:i64 startOffset, 4:i64 eOffset);
    string getset(1:string cluster, 2: string key, 3:string value);
    i64 setnx(1:string cluster, 2: string key, 3:string value);
    string setex(1:string cluster, 2: string key, 3:i32 seconds, 4:string value);
    i64 decrBy(1:string cluster, 2: string key, 3:i64 integer);
    i64 decr(1:string cluster, 2: string key);
    i64 incrBy(1:string cluster, 2: string key, 3:i64 integer);
    i64 incr(1:string cluster, 2: string key);
    i64 appe(1:string cluster, 2: string key, 3:string value);
    string substr(1:string cluster, 2: string key, 3:i32 start, 4:i32 e);
    i64 hset(1:string cluster, 2: string key, 3:string field, 4:string value);
    string hget(1:string cluster, 2: string key, 3:string field);
    i64 hsetnx(1:string cluster, 2: string key, 3:string field, 4:string value);
    string hmset(1:string cluster, 2: string key, 3:map<string, string> hash);
    list<string> hmget(1:string cluster, 2: string key, 3:binary fields);
    i64 hincrBy(1:string cluster, 2: string key, 3:string field, 4:i64 value);
    bool hexists(1:string cluster, 2: string key, 3:string field);
    i64 hdel(1:string cluster, 2: string key, 3:binary field);
    i64 hlen(1:string cluster, 2: string key);
    set<string> hkeys(1:string cluster, 2: string key);
    list<string> hvals(1:string cluster, 2: string key);
    map<string, string> hgetAll(1:string cluster, 2: string key);
    i64 rpush(1:string cluster, 2: string key, 3:binary str);
    i64 lpush(1:string cluster, 2: string key, 3:binary str);
    i64 llen(1:string cluster, 2: string key);
    list<string> lrange(1:string cluster, 2: string key, 3:i64 start, 4:i64 e);
    string ltrim(1:string cluster, 2: string key, 3:i64 start, 4:i64 e);
    string lindex(1:string cluster, 2: string key, 3:i64 index);
    string lset(1:string cluster, 2: string key, 3:i64 index, 4:string value);
    i64 lrem(1:string cluster, 2: string key, 3:i64 count, 4:string value);
    string lpop(1:string cluster, 2: string key);
    string rpop(1:string cluster, 2: string key);
    i64 sadd(1:string cluster, 2: string key, 3:binary member);
    set<string> smembers(1:string cluster, 2: string key);
    i64 srem(1:string cluster, 2: string key, 3:binary member);
    string spop(1:string cluster, 2: string key);
    i64 scard(1:string cluster, 2: string key);
    bool sismember(1:string cluster, 2: string key, 3:string member);
    string srandmember(1:string cluster, 2: string key);
    list<string> srandmemberList(1:string cluster, 2: string key, 3:i32 count);
    i64 strlen(1:string cluster, 2: string key);
    i64 zadd(1:string cluster, 2: string key, 3:double score, 4:string member);
    i64 zaddMap(1:string cluster, 2: string key, 3:map<string, double> scoreMembers);
    set<string> zrange(1:string cluster, 2: string key, 3:i64 start, 4:i64 e);
    i64 zrem(1:string cluster, 2: string key, 3:binary member);
    double zincrby(1:string cluster, 2: string key, 3:double score, 4:string member);
    i64 zrank(1:string cluster, 2: string key, 3:string member);
    i64 zrevrank(1:string cluster, 2: string key, 3:string member);
    set<string> zrevrange(1:string cluster, 2: string key, 3:i64 start, 4:i64 e);
    set<Tuple> zrangeWithScores(1:string cluster, 2: string key, 3:i64 start, 4:i64 e);
    set<Tuple> zrevrangeWithScores(1:string cluster, 2: string key, 3:i64 start, 4:i64 e);
    i64 zcard(1:string cluster, 2: string key);
    double zscore(1:string cluster, 2: string key, 3:string member);
    list<string> sort(1:string cluster, 2: string key);
    list<string> sortParams(1:string cluster, 2: string key, 3:SortingParams sortingParameters);
    i64 zcount(1:string cluster, 2: string key, 3:double min, 4:double max);
    i64 zcounts(1:string cluster, 2: string key, 3:string min, 4:string max);
    set<string> zrangeByScore1(1:string cluster, 2: string key, 3:double min, 4:double max);
    set<string> zrangeByScore2(1:string cluster, 2: string key, 3:string min, 4:string max);
    set<string> zrevrangeByScore1(1:string cluster, 2: string key, 3:double max, 4:double min);
    set<string> zrangeByScore3(1:string cluster, 2: string key, 3:double min, 4:double max, 5:i32 offset, 6:i32 count);
    set<string> zrevrangeByScore2(1:string cluster, 2: string key, 3:string max, 4:string min);
    set<string> zrangeByScore4(1:string cluster, 2: string key, 3:string min, 4:string max, 5:i32 offset, 6:i32 count);
    set<string> zrevrangeByScore3(1:string cluster, 2: string key, 3: double max, 4:double min, 5:i32 offset, 6:i32 count);
    set<Tuple> zrangeByScoreWithScores1(1:string cluster, 2: string key, 3:double min, 4:double max);
    set<Tuple> zrevrangeByScoreWithScores1(1:string cluster, 2: string key, 3:double max, 4:double min);
    set<Tuple> zrangeByScoreWithScores2(1:string cluster, 2: string key, 3:double min, 4:double max, 5:i32 offset, 6:i32 count);
    set<string> zrevrangeByScore(1:string cluster, 2: string key, 3: string max, 4: string min, 5: i32 offset, 6: i32 count);
    set<Tuple> zrangeByScoreWithScores3(1:string cluster, 2: string key, 3: string min, 4: string max);
    set<Tuple> zrevrangeByScoreWithScores2(1:string cluster, 2: string key, 3: string max, 4: string min);
    set<Tuple> zrangeByScoreWithScores4(1:string cluster, 2: string key, 3: string min, 4: string max, 5: i32 offset, 6: i32 count);
    set<Tuple> zrevrangeByScoreWithScores3(1:string cluster, 2: string key, 3: double max, 4: double min, 5: i32 offset, 6: i32 count);
    set<Tuple> zrevrangeByScoreWithScores4(1:string cluster, 2: string key, 3: string max, 4: string min, 5: i32 offset, 6: i32 count);
    i64 zremrangeByRank(1:string cluster, 2: string key, 3: i64 start, 4: i64 e);
    i64 zremrangeByScore1(1:string cluster, 2: string key, 3: double start, 4: double e);
    i64 zremrangeByScore2(1:string cluster, 2: string key, 3: string start, 4: string e);
    i64 zlexcount(1:string cluster, 2:  string key,  3: string min,  4: string max);
    set<string> zrangeByLex1(1:string cluster, 2:  string key,  3: string min, 4: string max);
    set<string> zrangeByLex2(1:string cluster, 2:  string key,  3: string min, 4: string max, 5: i32 offset,  6: i32 count);
    set<string> zrevrangeByLex1(1:string cluster, 2:  string key,  3: string max, 4: string min);
    set<string> zrevrangeByLex2(1:string cluster, 2:  string key,  3: string max, 4: string min,  5: i32 offset,  6: i32 count);
    i64 zremrangeByLex(1:string cluster, 2:  string key,  3: string min,  4: string max);
    i64 linsert(1:string cluster, 2: string key, 3: Client.LIST_POSITION where, 4: string pivot, 5: string value);
    i64 lpushx(1:string cluster, 2: string key, 3: binary str);
    i64 rpushx(1:string cluster, 2: string key, 3: binary str);
    list<string> blpop1(1:string cluster, 2: string arg);
    list<string> blpop2(1:string cluster, 2: i32 timeout, 3: string key);
    list<string> brpop1(1:string cluster, 2: string arg);
    list<string> brpop2(1:string cluster, 2: i32 timeout, 3: string key);
    i64 dels(1:string cluster, 2: string key);
    string echo(1:string cluster, 2: string str);
    i64 move(1:string cluster, 2: string key, 3:i32 dbIndex);
    i64 bitcount1(1:string cluster, 2:  string key);
    i64 bitcount2(1:string cluster, 2:  string key, 3: i64 start, 4: i64 e);
    binary hscan(1:string cluster, 2:  string key, 3: string cursor);
    binary sscan(1:string cluster, 2: string key, 3: string cursor);
    binary zscan(1:string cluster, 2: string key,  3: string cursor);
    i64 pfadd(1:string cluster, 2:  string key,  3: binary elements);
    i64 pfcount(1:string cluster, 2:  string key);
}
